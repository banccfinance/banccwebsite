{"remainingRequest":"/Users/nm1/Documents/banccwebsite/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nm1/Documents/banccwebsite/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nm1/Documents/banccwebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nm1/Documents/banccwebsite/src/components/Sections/Section1.vue?vue&type=template&id=0b5eba4d&","dependencies":[{"path":"/Users/nm1/Documents/banccwebsite/src/components/Sections/Section1.vue","mtime":1641068660807},{"path":"/Users/nm1/Documents/banccwebsite/node_modules/cache-loader/dist/cjs.js","mtime":1640888518000},{"path":"/Users/nm1/Documents/banccwebsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640888522000},{"path":"/Users/nm1/Documents/banccwebsite/node_modules/cache-loader/dist/cjs.js","mtime":1640888518000},{"path":"/Users/nm1/Documents/banccwebsite/node_modules/vue-loader/lib/index.js","mtime":1640888522000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}