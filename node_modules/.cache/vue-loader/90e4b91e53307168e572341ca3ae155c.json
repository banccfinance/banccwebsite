{"remainingRequest":"/Users/m1/Downloads/banccwebsite/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/m1/Downloads/banccwebsite/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/m1/Downloads/banccwebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/m1/Downloads/banccwebsite/src/components/Sections/Section2About.vue?vue&type=template&id=04525a0f&","dependencies":[{"path":"/Users/m1/Downloads/banccwebsite/src/components/Sections/Section2About.vue","mtime":1640867964000},{"path":"/Users/m1/Downloads/banccwebsite/node_modules/cache-loader/dist/cjs.js","mtime":1640888219549},{"path":"/Users/m1/Downloads/banccwebsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640888225618},{"path":"/Users/m1/Downloads/banccwebsite/node_modules/cache-loader/dist/cjs.js","mtime":1640888219549},{"path":"/Users/m1/Downloads/banccwebsite/node_modules/vue-loader/lib/index.js","mtime":1640888225618}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}