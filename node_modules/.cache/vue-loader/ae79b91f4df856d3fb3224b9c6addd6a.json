{"remainingRequest":"/Users/nm1/Documents/Development/banccwebsite/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nm1/Documents/Development/banccwebsite/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nm1/Documents/Development/banccwebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nm1/Documents/Development/banccwebsite/src/components/Sections/Section2About.vue?vue&type=template&id=04525a0f&","dependencies":[{"path":"/Users/nm1/Documents/Development/banccwebsite/src/components/Sections/Section2About.vue","mtime":1638371862490},{"path":"/Users/nm1/Documents/Development/banccwebsite/node_modules/cache-loader/dist/cjs.js","mtime":1638366539899},{"path":"/Users/nm1/Documents/Development/banccwebsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1638366544521},{"path":"/Users/nm1/Documents/Development/banccwebsite/node_modules/cache-loader/dist/cjs.js","mtime":1638366539899},{"path":"/Users/nm1/Documents/Development/banccwebsite/node_modules/vue-loader/lib/index.js","mtime":1638366544521}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}