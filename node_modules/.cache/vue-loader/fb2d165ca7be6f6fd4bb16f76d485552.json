{"remainingRequest":"/Users/nm1/Documents/banccwebsite/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nm1/Documents/banccwebsite/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nm1/Documents/banccwebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nm1/Documents/banccwebsite/src/components/Sections/Section0Faq.vue?vue&type=template&id=e3bde44c&","dependencies":[{"path":"/Users/nm1/Documents/banccwebsite/src/components/Sections/Section0Faq.vue","mtime":1641078938857},{"path":"/Users/nm1/Documents/banccwebsite/node_modules/cache-loader/dist/cjs.js","mtime":1640888518000},{"path":"/Users/nm1/Documents/banccwebsite/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640888522000},{"path":"/Users/nm1/Documents/banccwebsite/node_modules/cache-loader/dist/cjs.js","mtime":1640888518000},{"path":"/Users/nm1/Documents/banccwebsite/node_modules/vue-loader/lib/index.js","mtime":1640888522000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJkaXYiLAogICAgeyBzdGF0aWNDbGFzczogInNlY3Rpb24tMGZhcSIgfSwKICAgIFsKICAgICAgX2MoImItY29udGFpbmVyIiwgWwogICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSBzZWN0aW9uLTFfX3N1Yi10aXRsZSIgfSwgWwogICAgICAgICAgX3ZtLl92KCIgRm9yZ2V0IHlvdXIgYmFuaywgZ28gQkFOQ0MuICIpLAogICAgICAgIF0pLAogICAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLTFfX3RpdGxlIHRpdGxlIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIiBGcmVxdWVudGx5IGFza2VkICIpLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoIiBxdWVzdGlvbnMgIiksCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLTFfX21vdmUtbGVmdCIgfSwgWwogICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24tMV9fcGFyYWdyYXBoIG10LTQgZnctNTAwIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiIEhvdyBjYW4gQmFuY2MgY29tcGV0ZSB3aXRoIENyeXB0by5jb20sIEJpbmFuY2UgZXRjPyAiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24tMV9fcGFyYWdyYXBoIG10LTQiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgVGhlIGNvcmUgaWRlYSBiZWhpbmQgZXZlcnkgc3VjY2Vzc2Z1bCBjb21wYW55IGlzIGZvY3VzaW5nIG9uIHByb2ZpdGFiaWxpdHkgb2YgY291cnNlLiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gQmFuY2MgYW5kIHRoZXNlIGNvbXBhbmllcyBpcyB0aGF0IHRoZXNlIGNvbXBhbmllcyB3YW50IHRvIGdlbmVyYXRlIGFzIGhpZ2ggaW5jb21lIGFzIHBvc3NpYmxlIGZvciB0aGVpciBzaGFyZWhvbGRlcnMgYW5kIHRoZWlyIHZhbGlkYXRvcnMgYXJlIHNlZW4gYXMgcGFydG5lcnMgd2l0aGluIHRoZWlyIGNvbXBhbnkgc3RyYXRlZ3kgYW5kIHJldmVudWUgbW9kZWwuIEJhbmNjIGJyaW5ncyB0aGUgc2FtZSB0eXBlIG9mIHJldmVudWUgbW9kZWwgYnV0IGZvciB0aGUg4oCccHVibGlj4oCdIGV5ZS4gRGVjcmVhc2luZyB0aGUgdG90YWwgaW5jb21lIGZvciBCYW5jYyBhbmQgaW5jcmVhc2luZyBpdCBmb3IgdGhlIHBhcnRpY2lwYW50cyBpbiB0aGUgYmxvY2tjaGFpbi4gIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLTFfX21vdmUtbGVmdCIgfSwgWwogICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24tMV9fcGFyYWdyYXBoIG10LTQgZnctNTAwIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiIEhvdyBjYW4gQmFuY2MgZG8gYWxsIG9mIHRoZXNlIHRoaW5ncz8gIiksCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLTFfX3BhcmFncmFwaCBtdC00IiB9LCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIFRlY2hub2xvZ3kgaXMgYW4gaW50ZXJlc3RpbmcgcGFydCBvZiBldm9sdXRpb24gYW5kIGFzIHdlIGhhdmUgc2VlbiB3aXRoIEJpdGNvaW4sIGVzcGVjaWFsbHkgdGhlIGxhc3QgZGVjYWRlLiBUaGluZ3MgYXJlIHN0YXJ0aW5nIHRvIGV2b2x2ZSBhdCBhIGdyZWF0ZXIgcGFjZSB0aGFuIGV2ZXIgYmVmb3JlLiBCYW5jYyB3YXMgZm91bmRlZCBvbiB0aGUgYmVsaWVmIHRoYXQgdGVjaG5vbG9neSBzaG91bGQgYmUgYXZhaWxhYmxlIGZvciBldmVyeW9uZSBhbmQgbWFraW5nIGl0IGRpZmZpY3VsdCBmb3IgdXNlcnMgdG8gaW50ZXJhY3Qgd2l0aCBpcyBub3QgdGhlIHJvYWQgd2UgYmVsaWV2ZSBpcyByaWdodC4gQnkgY29ubmVjdGluZyBleGlzdGluZyB0ZWNobm9sb2dpZXMgdGhhdCBoYXZlIGEgcHJldmlvdXMgaGlzdG9yeSB0aGF0IHNob3dzIHN0YWJpbGl0eSBhbmQgcm9vbSBmb3IgZ3Jvd3RoIEJhbmNjLCB3aWxsIGJlIGFibGUgdG8gYnJpZGdlIHRoZSBnYXAgYmV0d2VlbiByZWd1bGFyIGJhbmtpbmcgaW5zdHJ1bWVudHMgYW5kIHRoZSBjcnlwdG9jdXJyZW5jeSBhdG1vc3BoZXJlLiAiCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24tMV9fbW92ZS1sZWZ0IiB9LCBbCiAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbi0xX19wYXJhZ3JhcGggbXQtNCBmdy01MDAiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJXaHkgaXMgQmFuY2MgbmVlZGVkPyIpLAogICAgICAgICAgXSksCiAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbi0xX19wYXJhZ3JhcGggbXQtNCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBUaGUgd29ybGQgaXMgY2hhbmdpbmcgYW5kIGNyeXB0b2N1cnJlbmN5IGlzIGhlcmUgdG8gc3RheS4gSnVzdCBvbmUgdGhpbmcsIGZlZXMuIElmIHlvdSBsb29rIGF0IGl0IGluIHRoZSBnZW5lcmFsIHVzZXJzIHRoYXQgZm9yIGV4YW1wbGUgdXNlcyByZW1pdHRhbmNlIHNlcnZpY2VzLiBGZWVzIGFyZSBzb21ld2hhdCB0aGUgc2FtZSB0aGluZy4gTm9ib2R5IHdhbnRzIHRvIHdvcmsgZm9yIGZyZWUgYnV0IGNoYXJnaW5nIGhpZ2ggZmVlcyBoYXJtcyB0aGUgcG90ZW50aWFsIGdyb3d0aCBvZiB0aGUgbmV0d29yay4gU2VuZGluZyAxMCQgb2Ygd29ydGggc2hvdWxkIG5vdCBiZSBjb3N0aW5nIDYwJCBhdCBwcmltZSB0aW1lLiBUaGUgZ2VuZXJhbCBwdWJsaWMgd2lsbCBiZSBuZWVkaW5nIHNvbWV0aGluZyB0aGF0IGlzIGNvc3QgZWZmZWN0aXZlIGFuZCBlYXNpZXIgdG8gdXNlIHRoYW4gdGhlIGN1cnJlbnQgc2VydmljZXMgcHJvdmlkZWQgdG9kYXkuIEJhbmNjIHNvbHZlcyB0aGlzIHByb2JsZW0gaW4gYSBkZWNlbnRyYWxpc2VkIG1hbm5lciB3aXRoIGNyZWF0aW5nIGEgaGVhbHRoeSBhbmQgc3VzdGFpbmFibGUgZWNvbm9teSB0aGF0IGRvZXMgbm90IHJlbHkgb24gb25lIHNpbmdsZSBwYXJ0LCBidXQgdGhlIG92ZXJhbGwgdXNlcnMgaW4gdGhlIG5ldHdvcmsuICIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbi0xX19tb3ZlLWxlZnQiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLTFfX3BhcmFncmFwaCBtdC00IGZ3LTUwMCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiIFdhbnQgdG8gdGFrZSBhIGRlZXBlciBkaXZlIGludG8gdGhlIEJhbmNjIEJsb2NrY2hhaW4/ICIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItZHJvcGRvd24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibS00IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGlkOiAiZHJvcGRvd24tb2Zmc2V0IiwKICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAiMjUiLAogICAgICAgICAgICAgICAgICB0ZXh0OiAiQVBQTFkgRk9SIFdISVRFTElTVCIsCiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYi1kcm9wZG93bi1pdGVtIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuYmFuY2MuaW8vcmVmZXIiLAogICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJBcHBseSBmb3IgV2hpdGVsaXN0IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJiLWRyb3Bkb3duLWl0ZW0iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvYy5iYW5jYy5pby9kb2N1bWVudGF0aW9uL3YvbGF1bmNoL2NvbXBldGl0aW9ucy9yZWZlci1hLWZyaWVuZCIsCiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkluZm9ybWF0aW9uIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJiLWRyb3Bkb3duLWl0ZW0iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvYy5iYW5jYy5pby9kb2N1bWVudGF0aW9uL3YvbGF1bmNoL2NvbXBldGl0aW9ucy9ydWxlcyIsCiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlJ1bGVzIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJiLWRyb3Bkb3duLWl0ZW0iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvYy5iYW5jYy5pby9kb2N1bWVudGF0aW9uL3YvbGF1bmNoL2NvbXBldGl0aW9ucyIsCiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbXBldGl0aW9ucyIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvYy5iYW5jYy5pbyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJCdXR0b24iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXktMCBteS1tZC00IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsdWU6ICJXSElURVBBUEVSIiB9LAogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}